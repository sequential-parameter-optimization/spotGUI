import pytest

# Assuming the main script is named `main.py` and the functions are in it
from spotgui.tuner.spotRun import (
    get_scenario_dict,
    get_sklearn_classification_core_model_names,
    get_classification_metric_sklearn_levels,
    get_sklearn_regression_core_model_names,
    get_regression_metric_sklearn_levels,
    get_sklearn_prep_models,
    get_sklearn_scalers,
    get_river_classification_core_model_names,
    get_river_binary_classification_datasets,
    get_river_regression_core_model_names,
    get_river_regression_datasets,
    get_river_rules_core_model_names,
    get_river_prep_models,
    get_lightning_regression_core_model_names,
)


@pytest.mark.parametrize(
    "scenario, expected_result",
    [
        (
            "sklearn",
            {
                "classification_task": {
                    "core_model_names": get_sklearn_classification_core_model_names(),
                    "metric_sklearn_levels": get_classification_metric_sklearn_levels(),
                    "datasets": [],
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                    "prep_models": get_sklearn_prep_models(),
                    "scalers": get_sklearn_scalers(),
                },
                "regression_task": {
                    "core_model_names": get_sklearn_regression_core_model_names(),
                    "metric_sklearn_levels": get_regression_metric_sklearn_levels(),
                    "datasets": [],
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                    "prep_models": get_sklearn_prep_models(),
                    "scalers": get_sklearn_scalers(),
                },
            },
        ),
        (
            "river",
            {
                "classification_task": {
                    "core_model_names": get_river_classification_core_model_names(),
                    "metric_sklearn_levels": get_classification_metric_sklearn_levels(),
                    "datasets": get_river_binary_classification_datasets(),
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                    "prep_models": get_river_prep_models(),
                },
                "regression_task": {
                    "core_model_names": get_river_regression_core_model_names(),
                    "metric_sklearn_levels": get_regression_metric_sklearn_levels(),
                    "datasets": get_river_regression_datasets(),
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                    "prep_models": get_river_prep_models(),
                },
                "rules_task": {
                    "core_model_names": get_river_rules_core_model_names(),
                    "metric_sklearn_levels": get_regression_metric_sklearn_levels(),
                    "datasets": get_river_regression_datasets(),
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                    "prep_models": get_river_prep_models(),
                },
            },
        ),
        (
            "lightning",
            {
                "regression_task": {
                    "core_model_names": get_lightning_regression_core_model_names(),
                    "metric_sklearn_levels": get_regression_metric_sklearn_levels(),
                    "datasets": [],
                    "n_total_entry": None,
                    "target_type_entry": None,
                    "test_size_entry": None,
                    "shuffle": None,
                    "max_sp_entry": None,
                    "max_time_entry": None,
                    "fun_evals_entry": None,
                    "init_size_entry": None,
                    "noise_entry": None,
                    "lambda_min_max_entry": None,
                    "seed_entry": None,
                    "metric_weights_entry": None,
                    "horizon_entry": None,
                    "oml_grace_period_entry": None,
                    "prefix_entry": None,
                    "tb_clean": None,
                    "tb_log": None,
                    "tb_start": None,
                    "tb_stop": None,
                }
            },
        ),
        ("unknown", None),
    ],
)
def test_get_scenario_dict(scenario, expected_result):
    assert get_scenario_dict(scenario) == expected_result
